---
layout: post
title:  "2020-01-08"
date:   2020-01-08= 19:03:00 +530
categories: Javascript
---

# Execution Context    

#### 실행할 코드에 제공할 환경 정보들을 모아놓은 객체

## Stack
출입구가 하나뿐인 데이터 구조   LIFO   
![Alt text](../../../../img/js/stack.png)    
[출처](https://velog.io/@kimkevin90/Java-script%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-Stack-%EA%B5%AC%ED%98%84)     

## Queue    
먼저 넣은 데이터가 먼저 나오는 구조   FIFO   
![Alt text](../../../../img/js/queue.png)    
[출처](https://www.programiz.com/dsa/queue)   

### 실행 컨텍스트는 정보를 모아 컨텍스트를 구성하고 콜 스택에 쌓아 올립니다. 함수가 종료되면 다음 줄부터 이어서 실행합니다.
```
function outer() {
    function inner() {} 
    inner();
}
outer()
```
![Alt text](../../../../img/js/callstack.png)   
[출처](https://velog.io/@modolee/core-javascript-02)   

### 어떤 실행 컨텍스트가 활성화 되면 자바스크립트 엔진은 관련 환경 정보를 수집해 실행 컨텍스트 객체에 저장합니다.

## Variable Environment   
   + environmentRecord   
   + outer-environmentReference   

#### 현재 컨텍스트 내의 식별자들에 대한 정보 + 외부 환경 정보, 선언 시점   
실행 컨텍스트를 생성할 때 Variable Environment에 정보를 담은 후 Lexical Environment에 복사 Lexical Environment 주로 사용


## Lexical Environment  
   + environmentRecord   
   + outer-environmentReference   

#### Variable Environment와 같지만 변경 사항이 실시간 반영

## environmentRecord와 호이스팅
#### 현재 컨텍스트와 관련된 정보 저장
   + 매개변수   
   + 선언된 함수   
   + 변수의 식별자   

## 호이스팅
```   
function a() {
    var x = 1;
    console.log(x); // 1 ? 
    var x;
    console.log(x); // undefined ?
    var x = 2;
    console.log(x); // 2 ?
}
a();
```   
함수를 실행하면 실행 컨텍스트 생성됩니다. 이때 변수명, 함수 선언 정보를 끌어 올립니다.(수집합니다) 변수의 할당부는 수집하지 않고 그 자리 그래도 둡니다.   
```
function a() {

    var x;
    var x;
    var x;

    x = 1;
    console.log(x); // 1
    console.log(x); // 1
    x = 2;
    console.log(x); // 2 
}
a();
```
## outer-environmentReference   
### Scope   
식별자에 대한 유효범위   
### Scope Chain
식별자의 유효범위를 안에서부터 바깥으로 차례로 검색   
### 가장 먼저 발견된 식별자에만 접근 가능
```
var a = 1;
var outer = function() {
    var inner = function() {
        console.log(a); // undefined
        var a = 3;
    }
    inner();
    console.log(a); // 1
}
outer();
console.log(a); // 1
```